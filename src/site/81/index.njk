{% block head %}
  <style>
body {
  background-color: #b01212;
}
#txt {
  font-size: 30em;
  font-family: Georgia, serif;
  font-weight: 700;
  letter-spacing: -0.08em;
  line-height: 1em;
  color: transparent;
  text-shadow: 0 0 15px rgba(0,0,0,0.45);
  position: absolute;
  top: 0.4em;
  left: 0;
  bottom: 0;
  right: 0;
  z-index: -1;
  overflow: hidden;
}
  </style>
  <script>

class TextScramble {
  constructor(el) {
    this.el = el;
    this.chars = '!<>-_\\/[]{}—=+*^?#________';
    this.update = this.update.bind(this);
  }
  setText(newText) {
    const oldText = this.el.innerText;
    const length = Math.max(oldText.length, newText.length);
    const promise = new Promise(resolve => this.resolve = resolve);
    this.queue = [];
    for (let i = 0; i < length; i++) {
      const from = oldText[i] || '';
      const to = newText[i] || '';
      const start = Math.floor(Math.random() * 40);
      const end = start + Math.floor(Math.random() * 40);
      this.queue.push({ from, to, start, end });
    }
    cancelAnimationFrame(this.frameRequest);
    this.frame = 0;
    this.update();
    return promise;
  }
  update() {
    let output = '';
    let complete = 0;
    for (let i = 0, n = this.queue.length; i < n; i++) {
      let { from, to, start, end, char } = this.queue[i];
      if (this.frame >= end) {
        complete++;
        output += to;
      } else if (this.frame >= start) {
        if (!char || Math.random() < 0.28) {
          char = this.randomChar();
          this.queue[i].char = char;
        }
        output += `<span>${char}</span>`;
      } else {
        output += from;
      }
    }
    this.el.innerHTML = output;
    if (complete === this.queue.length) {
      this.resolve();
    } else {
      this.frameRequest = requestAnimationFrame(this.update);
      this.frame++;
    }
  }
  randomChar() {
    return this.chars[Math.floor(Math.random() * this.chars.length)];
  }}

const phrases = [
  'nikada',
  'voleo',
  'tužan',
  'umoran',
  'nikada',
  'kraj',
  'zbogom',
  'zauvek',
  'slomljen',
  'zašto',
  'izgubljen',
  'ugašen',
  'ljubav',
  'kraj',
  'bol',
  'bezimeno',
  'vrisak',
  'tama',
];

ready(function() {
  const el = document.querySelector('#txt');
  const fx = new TextScramble(el);

  let counter = 0;
  const next = () => {
    fx.setText(phrases[counter]).then(() => {
      setTimeout(next, 800);
    });
    counter = (counter + 1) % phrases.length;
  };

  next();
});
  </script>
{% endblock %}
{% block main %}

  <main>
    <div id="txt" style="text-align: center">xxx</div>
  </main>

{% endblock %}
